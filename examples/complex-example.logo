% ADVANCED LOGO TEST CASE
% This file tests edge cases and complex language features

% Test variable declarations with multiple variables per line
VAR pi, e, phi, tau, infinity
VAR _underscore, camelCase, PascalCase, snake_case, UPPERCASE

% Test numeric literals
% Integers
pi := 3
e := 2
% Decimals with different patterns
phi := 1.618033988749895
tau := 6.28318
% Zero values
zero := 0
zero_decimal := 0.0
% Negative values
negative := -10
negative_decimal := -3.14159

% Test comment placement
x := 10 % This is an end-of-line comment
y := 20 % Another comment with special chars: !@#$%^&*()_+
% Comment followed by complex expression
z := (x + y) * 2 / (1 - 0.5) + (x MOD y)

% Test string literals with special characters
PRINT("Special characters: !@#$^&*()_+-={}[]|\\:;'<>,.?/")
PRINT("Quotes inside text: He said \"Hello World\"")
PRINT("Numbers in strings: 123.456, -789")
PRINT("Multiple       spaces      and\ttabs\tin\ttext")

% Test complex boolean expressions
IF (x > 5 AND y < 30 AND z = 60) [
    PRINT("Complex condition 1 is true")
]

IF ((x + y) > 25 OR (x * y) > 150) [
    PRINT("Complex condition 2 is true")
]

IF (NOT (x = 0) AND (y MOD 2) = 0) [
    PRINT("Complex condition 3 is true")
]

% Test nested control structures
i := 0
WHILE (i < 5) [
    j := 0
    WHILE (j < 3) [
        IF (i + j > 3) [
            PRINT("i = ", i, ", j = ", j, ", sum = ", i + j)
        ]
        j := j + 1
    ]
    i := i + 1
]

% Test precedence of operators in complex expressions
result1 := 10 + 20 * 30         % Should be 610 with proper precedence
result2 := (10 + 20) * 30       % Should be 900 with parentheses
result3 := 100 / 5 / 4          % Should be 5 with left-to-right evaluation
result4 := 100 / (5 / 4)        % Should be 80 with parentheses changing precedence
result5 := 10 + 20 - 15 + 5     % Should be 20 with left-to-right for same precedence

% Test boundary cases for the lexer
adjacent_operators := 10+-20    % Should tokenize as 10, +, -, 20

% Test identifiers with single characters
a := 1
b := 2
c := 3

% Test lexer's handling of edge cases
edge_case_1 := .5               % Should be tokenized as '.', '5'
edge_case_2 := 5.               % Should be tokenized as '5', '.'

% Test complex drawing commands with expressions
COLOR(255 * (1 - 0.5), 0, 255 * 0.5)
PENWIDTH(1 + 2 * 3 / 4)
CIRCLE(50 + 10 * 2)

% Test recursive procedure simulation
VAR factorial, n
n := 5
factorial := 1
WHILE (n > 0) [
    factorial := factorial * n
    n := n - 1
]
PRINT("Factorial of 5 is: ", factorial)

% Test extreme values and boundary computations
extreme_computation := 9999999 * 9999999 / 9999999
boundary_test := 0.000001 + 0.000001

% Test consecutive operations
consecutive_ops := 10 + 20 + 30 + 40 + 50 + 60 + 70 + 80 + 90 + 100

% Test binary operations with different types
mixed_type_op := 10 + 20.5
mixed_computation := (10 * 5) + (20.5 / 2) - (30 MOD 7)

% Test boundary line and column tracking
very_long_line := 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

% Test compound comparisons (not technically part of most Logo dialects, but good for lexer testing)
compound_test := (x > 10 AND y < 20) OR (z = 30 AND (x + y) <> 40)

% Final operations
HOME
CLEAR()
PRINT("Advanced test completed!")